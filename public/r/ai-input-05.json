{
  "name": "ai-input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Paperclip, ImageIcon, Figma, Send } from \"lucide-react\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport default function AIInput_05() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({ minHeight: 56, maxHeight: 220 })\r\n  const [value, setValue] = useState(\"\")\r\n\r\n  const onSubmit = () => {\r\n    setValue(\"\")\r\n    adjustHeight(true)\r\n  }\r\n\r\n  const addText = (t: string) => setValue((v) => (v ? `${v} ${t}` : t))\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"max-w-xl mx-auto w-full space-y-3\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            className=\"inline-flex items-center gap-2 rounded-lg bg-black/5 dark:bg-white/5 px-3 py-1.5 text-sm\"\r\n            onClick={() => addText(\"[Attach spec.pdf]\")}\r\n            type=\"button\"\r\n          >\r\n            <Paperclip className=\"h-4 w-4\" /> Attach\r\n          </button>\r\n          <button\r\n            className=\"inline-flex items-center gap-2 rounded-lg bg-black/5 dark:bg-white/5 px-3 py-1.5 text-sm\"\r\n            onClick={() => addText(\"[Insert screenshot.png]\")}\r\n            type=\"button\"\r\n          >\r\n            <ImageIcon className=\"h-4 w-4\" /> Image\r\n          </button>\r\n          <button\r\n            className=\"inline-flex items-center gap-2 rounded-lg bg-black/5 dark:bg-white/5 px-3 py-1.5 text-sm\"\r\n            onClick={() => addText(\"[Link Figma file]\")}\r\n            type=\"button\"\r\n          >\r\n            <Figma className=\"h-4 w-4\" /> Figma\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"relative\">\r\n          <Textarea\r\n            aria-label=\"Prompt composer with toolbar\"\r\n            ref={textareaRef}\r\n            value={value}\r\n            onChange={(e) => {\r\n              setValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                onSubmit()\r\n              }\r\n            }}\r\n            placeholder=\"Describe what you want the agent to doâ€¦\"\r\n            className={cn(\r\n              \"rounded-2xl bg-black/5 dark:bg-white/5 border-none pl-4 pr-12 py-4\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0 min-h-[56px] max-h-[220px] overflow-y-auto\",\r\n            )}\r\n          />\r\n          <button\r\n            onClick={onSubmit}\r\n            type=\"button\"\r\n            disabled={!value}\r\n            className={cn(\r\n              \"absolute right-2 top-1/2 -translate-y-1/2 rounded-xl p-2\",\r\n              value ? \"bg-blue-600 text-white\" : \"bg-black/5 dark:bg-white/5 text-black/50 dark:text-white/50\",\r\n            )}\r\n          >\r\n            <Send className=\"h-4 w-4\" />\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"flex gap-2 flex-wrap\">\r\n          {[\"Summarize attachments\", \"Generate alt text\", \"Create handoff checklist\"].map((x) => (\r\n            <button\r\n              key={x}\r\n              onClick={() => addText(x)}\r\n              type=\"button\"\r\n              className=\"rounded-full bg-black/5 dark:bg-white/5 px-3 py-1.5 text-sm\"\r\n            >\r\n              {x}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/codesnippetui/ai-input/ai-input-05.tsx",
      "target": "/components/codesnippetui/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}