{
  "name": "vercel-v0-chat",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "textarea"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { ArrowUpRight, PartyPopper, Rocket } from \"lucide-react\";\nimport Link from \"next/link\";\nimport XIcon from \"../icons/x-icon\";\nimport { ConfettiOutline } from \"../icons/conffeti\";\nimport { useState, useEffect } from \"react\";\n\ninterface HeaderContent {\n  text: string;\n  productName: string;\n  link: string;\n}\n\nexport function HeaderPro() {\n  const [content, setContent] = useState<HeaderContent>({\n    text: \"\",\n    productName: \"\",\n    link: \"\",\n  });\n\n  useEffect(() => {\n    const random = Math.random();\n    if (random < 0.75) {\n      setContent({\n        text: \"Built app fast\",\n        productName: \"CodeSnippet Boilerplate\",\n        link: \"#\",\n      });\n    } else {\n      setContent({\n        text: \"Explore new components\",\n        productName: \"CodeSnippet UI Pro\",\n        link: \"#\",\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-end gap-1 flex-1\">\n      <div className=\"flex items-center justify-start md:justify-end gap-1 flex-1\">\n        <Link\n          href={content.link}\n          target=\"_blank\"\n          className=\"flex items-center justify-end gap-2 pl-2 pr-0.5 py-1 text-sm font-medium text-zinc-800 dark:text-zinc-200 rounded-xl border-2 border-fuchsia-500/20 hover:border-fuchsia-500/60 transition-all duration-300 group hover:shadow-md\"\n        >\n          <span className=\"hidden md:flex items-center gap-2\">\n            {content.productName === \"CodeSnippet UI Pro\" ? (\n              <ConfettiOutline className=\"w-4 h-4 text-fuchsia-500\" />\n            ) : (\n              <Rocket className=\"w-4 h-4 text-fuchsia-500\" />\n            )}\n            <span className=\"text-transparent bg-gradient-to-r from-fuchsia-500 via-purple-500 to-fuchsia-600 bg-clip-text font-semibold tracking-tighter\">\n              {content.text}\n            </span>\n          </span>\n\n          <span className=\"flex md:hidden items-center gap-2\">\n            {content.productName === \"CodeSnippet UI Pro\" ? (\n              <PartyPopper className=\"w-4 h-4 text-fuchsia-500\" />\n            ) : (\n              <Rocket className=\"w-4 h-4 text-fuchsia-500\" />\n            )}\n            <span className=\"text-transparent bg-gradient-to-r from-fuchsia-500 via-purple-500 to-fuchsia-600 bg-clip-text font-semibold\">\n              {content.text.split(\" \")[0]}\n            </span>\n          </span>\n\n          <div className=\"relative inline-flex items-center gap-2 px-1.5 py-0.5 text-sm rounded-lg bg-gradient-to-r from-zinc-900 to-zinc-800 dark:from-zinc-100/90 dark:to-zinc-200/90\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-white dark:text-zinc-900 group-hover:text-white dark:group-hover:text-zinc-900 tracking-tighter\">\n                {content.productName}\n              </span>\n              <ArrowUpRight className=\"w-3.5 h-3.5 text-white/90 dark:text-zinc-900/90 group-hover:text-white dark:group-hover:text-zinc-900 transition-transform group-hover:translate-x-[1px] group-hover:-translate-y-[1px]\" />\n            </div>\n          </div>\n        </Link>\n        <Link\n          href=\"#\"\n          target=\"_blank\"\n          className=\"hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1.5 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-800 dark:hover:bg-zinc-200\"\n        >\n          <div className=\"relative flex items-center gap-2 w-full\">\n            <svg\n              viewBox=\"0 0 24 24\"\n              className=\"w-4 h-4 text-white dark:text-zinc-900\"\n              fill=\"currentColor\"\n            >\n              <title>Github</title>\n              <path d=\"M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z\" />\n            </svg>\n          </div>\n        </Link>\n        <Link\n          href=\"#\"\n          target=\"_blank\"\n          className=\"hidden group relative md:inline-flex items-center gap-2 px-1.5 py-1.5 text-sm rounded-lg bg-zinc-900 dark:bg-zinc-100 transition-colors hover:bg-zinc-800 dark:hover:bg-zinc-200\"\n        >\n          <XIcon className=\"w-4 h-4 text-white dark:text-zinc-900\" />\n        </Link>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/components/codesnippetui/vercel-v0-chat.tsx",
      "target": "/components/codesnippetui/vercel-v0-chat.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}