{
  "name": "ai-input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Mic, Send, Figma, Sparkles } from \"lucide-react\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\nexport default function AIInput_02() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({ minHeight: 52, maxHeight: 200 })\r\n  const [value, setValue] = useState(\"\")\r\n\r\n  const onSubmit = () => {\r\n    setValue(\"\")\r\n    adjustHeight(true)\r\n  }\r\n\r\n  const suggestions = [\r\n    \"Summarize Figma file\",\r\n    \"Generate component variants\",\r\n    \"Write release notes\",\r\n    \"Draft PR description\",\r\n  ]\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"max-w-xl mx-auto w-full space-y-3\">\r\n        <div className=\"relative\">\r\n          <div className=\"absolute left-2 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-2\">\r\n            <Figma className=\"h-4 w-4 text-black/70 dark:text-white/70\" aria-hidden />\r\n          </div>\r\n\r\n          <Textarea\r\n            aria-label=\"AI input\"\r\n            ref={textareaRef}\r\n            value={value}\r\n            onChange={(e) => {\r\n              setValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                onSubmit()\r\n              }\r\n            }}\r\n            placeholder=\"Ask the agent to help with your Figma fileâ€¦\"\r\n            className={cn(\r\n              \"pl-10 pr-20 py-4 rounded-3xl bg-black/5 dark:bg-white/5\",\r\n              \"text-black dark:text-white border-none\",\r\n              \"placeholder:text-black/50 dark:placeholder:text-white/50\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"min-h-[52px] max-h-[200px] overflow-y-auto transition-[height] duration-100 ease-out\",\r\n            )}\r\n          />\r\n\r\n          <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-2\">\r\n            <button\r\n              className=\"rounded-xl bg-black/5 dark:bg-white/5 p-2\"\r\n              type=\"button\"\r\n              aria-label=\"Voice input\"\r\n              onClick={() => {}}\r\n            >\r\n              <Mic className=\"h-4 w-4 text-black/70 dark:text-white/70\" />\r\n            </button>\r\n            <button\r\n              onClick={onSubmit}\r\n              type=\"button\"\r\n              disabled={!value}\r\n              aria-disabled={!value}\r\n              className={cn(\r\n                \"rounded-xl p-2 transition-colors\",\r\n                value\r\n                  ? \"bg-blue-600 text-white\"\r\n                  : \"bg-black/5 dark:bg-white/5 text-black/50 dark:text-white/50 cursor-not-allowed\",\r\n              )}\r\n            >\r\n              <Send className=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {suggestions.map((s) => (\r\n            <button\r\n              key={s}\r\n              type=\"button\"\r\n              onClick={() => setValue((prev) => (prev ? prev + \" \" + s : s))}\r\n              className=\"inline-flex items-center gap-1 rounded-full bg-black/5 dark:bg-white/5 px-3 py-1.5 text-sm text-black/80 dark:text-white/80\"\r\n            >\r\n              <Sparkles className=\"h-3.5 w-3.5\" />\r\n              <span className=\"text-pretty\">{s}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/codesnippetui/ai-input/ai-input-02.tsx",
      "target": "/components/codesnippetui/ai-input-02.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\r\n\r\ninterface UseFileInputOptions {\r\n    accept?: string;\r\n    maxSize?: number;\r\n}\r\n\r\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\r\n    const [fileName, setFileName] = useState<string>(\"\");\r\n    const [error, setError] = useState<string>(\"\");\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [fileSize, setFileSize] = useState<number>(0);\r\n\r\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        validateAndSetFile(file);\r\n    };\r\n\r\n    const validateAndSetFile = (file: File | undefined) => {\r\n        setError(\"\");\r\n\r\n        if (file) {\r\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\r\n                setError(`File size must be less than ${maxSize}MB`);\r\n                return;\r\n            }\r\n\r\n            if (\r\n                accept &&\r\n                !file.type.match(accept.replace(\"/*\", \"/\"))\r\n            ) {\r\n                setError(`File type must be ${accept}`);\r\n                return;\r\n            }\r\n\r\n            setFileSize(file.size);\r\n            setFileName(file.name);\r\n        }\r\n    };\r\n\r\n    const clearFile = () => {\r\n        setFileName(\"\");\r\n        setError(\"\");\r\n        setFileSize(0);\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        fileName,\r\n        error,\r\n        fileInputRef,\r\n        handleFileSelect,\r\n        validateAndSetFile,\r\n        clearFile,\r\n        fileSize,\r\n    };\r\n}",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}